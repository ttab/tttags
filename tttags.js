// Generated by CoffeeScript 1.6.3
(function() {
  var $, ACT, ON, SEL, TTTags, defaultOpts, subst,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    _this = this;

  $ = jQuery;

  ON = 'ttton';

  SEL = 'tttsel';

  ACT = 'tttact';

  subst = function(expr, map) {
    return expr.replace(/\#{([^{}]*)}/g, function(a, b) {
      var r, t;
      r = map[b];
      if ((t = typeof r) === 'string' || t === 'number') {
        return r;
      } else {
        return a;
      }
    });
  };

  defaultOpts = {
    placeholder: '',
    template: '<a class="tag">#{tag}</a>',
    className: 'label label-default',
    allowNew: true,
    source: function() {},
    onTagAdd: function() {},
    onTagRemove: function() {},
    onFocus: function() {},
    onBlur: function() {}
  };

  TTTags = (function() {
    function TTTags(opts) {
      this.add = __bind(this.add, this);
      this.inList = __bind(this.inList, this);
      this.has = __bind(this.has, this);
      this.removeLast = __bind(this.removeLast, this);
      this.remove = __bind(this.remove, this);
      this.focus = __bind(this.focus, this);
      this.source = __bind(this.source, this);
      $.extend(this, Backbone.Events);
      this.opts = $.extend({}, defaultOpts, opts);
      this.$el = this.opts.$el;
      this.$el.addClass('tttags');
      this.$el.on('click', this._onClick);
      this.$el.on('mousedown', this._onMouseDown);
      this.$el.on('focus', this._onFocus);
      if (this.opts.placeholder) {
        $('<span class="tttplaceholder">').text(this.opts.placeholder).appendTo(this.$el);
        this._maybeShowPlaceholder();
      }
      this.src = this.opts.source;
    }

    TTTags.prototype.source = function(source) {
      var tags, _ref,
        _this = this;
      if ((_ref = this.$list) != null) {
        _ref.remove();
      }
      this.$list = null;
      this.src = source;
      if (this.isActive()) {
        this._buildListAndInput();
        this._suggest(this.$input.text());
      }
      if ((tags = this.tags()).length) {
        tags.forEach(function(tag) {
          if (!_this.inList(tag)) {
            return _this.remove(tag);
          }
        });
        this._maybeShowPlaceholder();
      }
      return this;
    };

    TTTags.prototype.focus = function() {
      this._buildListAndInput();
      this.$input.attr('contenteditable', true);
      this.$input.focus();
      return this;
    };

    TTTags.prototype.remove = function(tag, opts) {
      var $el;
      opts = opts != null ? opts : {};
      $el = tag;
      if (!(tag instanceof $)) {
        $el = $('.tag', this.$el).filter(function() {
          return $(this).text() === tag;
        });
      }
      if ($el != null ? $el.length : void 0) {
        $el.remove();
        if (!opts.silent) {
          this._trigger('remove', 'onTagRemove', $el.text(), $el);
        }
      }
      return this;
    };

    TTTags.prototype.removeLast = function() {
      this.remove($('.tag', this.$el).last());
      return this;
    };

    TTTags.prototype.has = function(tag) {
      return ($('.tag', this.$el).filter(function() {
        return $(this).text() === tag;
      })).length > 0;
    };

    TTTags.prototype.inList = function(tag) {
      this._buildListAndInput();
      return ($('li', this.$list).filter(function() {
        return $(this).text() === tag;
      })).length > 0;
    };

    TTTags.prototype.add = function(tag, opts) {
      var $el, inList;
      opts = opts != null ? opts : {};
      if (this.has(tag)) {
        return this;
      }
      if (!(this.opts.allowNew || opts.force || (inList = this.inList(tag)))) {
        return this;
      }
      return $el = $(subst(this.opts.template, {
        tag: tag
      }));
    };

    return TTTags;

  })();

  $el.addClass(this.opts.className(this.opts.className ? (this.$inputwrap ? this.$inputwrap.before($el) : $('.tag', this.$el).last().after($el).length === 0 ? this.$el.prepend($el) : void 0, !opts.silent ? this._trigger('add', 'onTagAdd', tag, $el, !inList) : void 0, this) : void 0));

  ({
    tags: function(toSet) {
      if (typeof toSet === 'string') {
        toSet = [toSet];
      }
      if ($.isArray(toSet)) {
        _this.tags().forEach(function(tag) {
          return _this.remove(tag, {
            silent: true
          });
        });
        toSet.forEach(function(tag) {
          return _this.add(tag, {
            force: true,
            silent: true
          });
        });
        _this._maybeShowPlaceholder();
        return _this;
      } else {
        return ($('.tag', _this.$el).map(function() {
          return $(this).text();
        })).toArray();
      }
    },
    isActive: function() {
      return _this.$el.hasClass(ACT);
    },
    destroy: function() {
      var _ref, _ref1, _ref2;
      if (_this.$input) {
        _this.$input.off();
      }
      if (_this.$el) {
        _this.$el.off();
      }
      if ((_ref = _this.$input) != null) {
        _ref.remove();
      }
      _this.$input = null;
      if ((_ref1 = _this.$list) != null) {
        _ref1.remove();
      }
      _this.$list = null;
      if ((_ref2 = _this.$inputwrap) != null) {
        _ref2.remove();
      }
      _this.$inputwrap = null;
      _this.$el.data('tttags', null);
      return _this.$el = null;
    },
    _trigger: function(event, callback, tag, el, isNew) {
      var cb, evt;
      evt = {
        type: event,
        tags: _this.tags(),
        src: _this
      };
      if (tag) {
        evt.tag = tag;
      }
      if (el) {
        evt.el = el;
      }
      if (typeof isNew === 'boolean') {
        evt.isNew = isNew;
      }
      _this.trigger(event, evt);
      cb = _this.opts[callback];
      if (typeof cb === 'function') {
        return cb(evt);
      }
    },
    _buildListAndInput: function() {
      var $ol, s;
      if (!_this.$input) {
        _this.$inputwrap = $('<span class="tttinputwrap">').appendTo(_this.$el);
        _this.$input = $('<span class="tttinput"/>').appendTo(_this.$inputwrap);
        _this.$input.on('focus', _this._onInputFocus);
        _this.$input.on('blur', _this._onInputBlur);
        _this.$input.on('keydown', _this._onInputKeyDown);
        _this.$input.on('keyup', _this._onInputKeyUp);
      }
      if (_this.$list) {
        return;
      }
      _this.$list = $('<div class="tttaglist">').appendTo(_this.$inputwrap);
      $ol = $('<ol>').appendTo(_this.$list);
      s = typeof _this.src === 'function' ? _this.src() : [];
      if (!$.isArray(s)) {
        s = [];
      }
      return s.forEach(function(tag) {
        return $('<li>').text(tag).appendTo($ol);
      });
    },
    _suggest: function(txt) {
      var $sel, ltxt, show;
      if (_this.lastSuggest !== txt) {
        ltxt = txt.toLowerCase();
        $('li', _this.$list).each(function(_, el) {
          var $el;
          $el = $(el);
          return $el.toggleClass(ON, $el.text().toLowerCase().indexOf(ltxt) === 0);
        });
        _this.lastSuggest = txt;
        $sel = $('li.' + SEL, _this.$list);
        if (!$sel.hasClass(ON)) {
          $sel.removeClass(SEL);
        }
        show = txt.length > 0 && $('li.' + ON, _this.$list).length > 0;
        return _this.$list.toggleClass(ON, show);
      }
    },
    _listStep: function(ev, up) {
      var $sel, lh, ls, sh, st, tmp;
      if (!_this.$list.hasClass(ON)) {
        return;
      }
      $sel = $('li.' + SEL, _this.$list);
      if ($sel.length) {
        if (up && (tmp = $sel.prevAll('li.' + ON)).length) {
          $sel.removeClass(SEL);
          tmp.first().addClass(SEL);
          ev.preventDefault();
        }
        if (!up && (tmp = $sel.nextAll('li.' + ON)).length) {
          $sel.removeClass(SEL);
          tmp.first().addClass(SEL);
          ev.preventDefault();
        }
      } else {
        if (up) {
          $('li.' + ON, _this.$list).last().addClass(SEL);
          ev.preventDefault();
        } else {
          $('li.' + ON, _this.$list).first().addClass(SEL);
          ev.preventDefault();
        }
      }
      $sel = $('li.' + SEL, _this.$list);
      if ($sel.length === 0) {
        return;
      }
      lh = _this.$list.outerHeight();
      ls = _this.$list.scrollTop();
      st = $sel[0].offsetTop;
      sh = $sel.outerHeight();
      if ((st + sh) > (lh + ls)) {
        _this.$list.scrollTop((st + sh) - lh);
      }
      if (st < ls) {
        return _this.$list.scrollTop(st);
      }
    },
    _doSelect: function() {
      var $sel;
      $sel = $('li.' + SEL, _this.$list);
      if ($sel.length) {
        _this.add($sel.text(), {
          force: true
        });
      } else {
        _this.add(_this.$input.text(), {
          force: false
        });
      }
      _this.$input.text('');
      return _this._suggest('');
    },
    _maybeShowPlaceholder: function() {
      return $('.tttplaceholder', _this.$el).toggleClass(ON, $('.tag', _this.$el).length === 0);
    },
    _onMouseDown: function(ev) {
      var $t, li;
      $t = $(ev.target);
      if ((li = $t.closest('li')).length > 0) {
        $('li.' + SEL, _this.$list).removeClass(SEL);
        li.addClass(SEL);
        _this._doSelect();
      }
      if (_this.isActive()) {
        return ev.preventDefault();
      }
    },
    _onClick: function(ev) {
      var $t;
      $t = $(ev.target);
      return _this.focus();
    },
    _onFocus: function(ev) {
      return _this.focus();
    },
    _onInputFocus: function(ev) {
      if (_this.isActive()) {
        return;
      }
      _this.$el.addClass(ACT);
      return _this._trigger('focus', 'onFocus');
    },
    _onInputBlur: function(ev) {
      if (!_this.isActive()) {
        return;
      }
      _this.$el.removeClass(ACT);
      _this.$input.text('').removeAttr('contenteditable');
      _this._suggest('');
      $('li.' + SEL, _this.$list).removeClass(SEL);
      _this._maybeShowPlaceholder();
      return _this._trigger('blur', 'onBlur');
    },
    _onInputKeyDown: function(ev) {
      var range, _ref;
      switch (ev.keyCode) {
        case 13:
          ev.preventDefault();
          return _this._doSelect();
        case 27:
          return _this.$input.blur();
        case 8:
          range = typeof window !== "undefined" && window !== null ? window.getSelection().getRangeAt(0) : void 0;
          if (range) {
            if ((range.startOffset === (_ref = range.endOffset) && _ref === 0)) {
              return _this.removeLast();
            }
          } else {
            if (_this.$input.text() === '') {
              return _this.removeLast();
            }
          }
          break;
        case 38:
          return _this._listStep(ev, true);
        case 40:
          return _this._listStep(ev, false);
      }
    },
    _onInputKeyUp: function(ev) {
      return _this._suggest(_this.$input.text());
    }
  });

  $.fn.tttags = function(action, data) {
    var obj, opts;
    opts = null;
    if ($.isPlainObject(action)) {
      opts = action;
      action = null;
    }
    obj = null;
    this.each(function(i, el) {
      var $el, topts;
      $el = $(el);
      obj = $el.data('tttags');
      if (!obj) {
        topts = $.extend({}, opts);
        topts.$el = $el;
        $el.data('tttags', obj = new TTTags(topts));
      }
      if (action) {
        return obj[action](data);
      }
    });
    if (action || opts) {
      return this;
    } else {
      return obj;
    }
  };

}).call(this);
